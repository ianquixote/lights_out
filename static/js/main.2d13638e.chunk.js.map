{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","isDisabled","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","clickHandler","setState","_this2","_this$props","ncols","nrows","count","push","Array","fill","map","item","Math","floor","random","chanceLightStartsOn","isSolvable","coord","console","log","_this$props2","_coord$split$map","split","Number","_coord$split$map2","slicedToArray","flipCell","y","x","flipAdjacent","flat","every","arr","toConsumableArray","_loop","idx1","idx2","length","_this3","emptyRow","el","src_Cell_0","idx","row","rowIdx","key","col","colIdx","concat","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d13638e.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board component to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    if (this.props.isDisabled) {\n      return (\n        <td className={classes} />\n      )\n    } else {\n      return (\n        <td className={classes} onClick={this.handleClick} />\n      )\n    }\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 30\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n\n    this.createBoard = this.createBoard.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  clickHandler() {\n    this.setState({hasWon: false, board: this.createBoard()});\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board;\n    let {ncols, nrows} = this.props;\n    do {\n      board = [];\n      for (let count = 0; count < nrows; count++) {\n        board.push(Array(ncols).fill('').map(item => Math.floor(Math.random() * 100) < this.props.chanceLightStartsOn));\n      }\n    } while (!this.isSolvable(board))\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    console.log(coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coordinate is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    function flipAdjacent(y, x) {\n      flipCell(y, x); //flip selected cell\n      flipCell(y - 1, x); //flip top cell\n      flipCell(y, x + 1); //flip right cell\n      flipCell(y + 1, x); //flip bottom cell \n      flipCell(y, x - 1); //flip left cell\n    }\n\n    flipAdjacent(y, x);\n\n    // win when every cell is turned off, i.e. false\n    let hasWon = this.state.board.flat().every(item => !item);\n\n    this.setState({board, hasWon});\n  }\n\n  isSolvable(board) {\n    board = board.map(arr => [...arr]);\n    /*\n    board is an array of arrays containing boolean values\n    example:\n    [\n      [true, false, true, false, true],\n      [false, false, true, true, true],\n      [true, true, true, false, false],\n      [true, false, true, false, true],\n      [false, false, true, true, true],\n    ]\n\n    Algorithm:\n    moving through each row until the second to last,\n      if true, flip the square below it.\n    if the last row is all false, return true\n    */\n\n    for (let idx1 = 0; idx1 <= board.length - 2; idx1++) {\n      for (let idx2 = 0; idx2 < board[idx1].length; idx2++) {\n        if (board[idx1][idx2]) /*tests if current cell is true*/ {\n          function flipCell(y, x) {\n            if (x >= 0 && x < board[idx1].length && y >= 0 && y < board.length) {\n              board[y][x] = !board[y][x];\n            }\n          }\n          flipCell(idx1 + 1, idx2); //flip lower cell\n          flipCell(idx1, idx2); //flip current cell (top of lower cell)\n          flipCell(idx1 + 1, idx2 + 1); //flip lower right cell\n          flipCell(idx1 + 2, idx2); //flip lower bottom cell \n          flipCell(idx1 + 1, idx2 - 1); //flip lower left cell\n        }\n      }\n    }\n    return board[board.length - 1].every(item => item === false);\n  }\n\n  render() {\n    if (this.state.hasWon) {\n      let emptyRow = <tr>\n        {Array(this.props.ncols).fill('').map(el => <Cell isDisabled/>)}\n      </tr>\n      return (\n        <div className={'Board'}>\n          <h1>You Won!</h1>\n          <table>\n            <tbody>\n              {emptyRow}\n              {emptyRow}\n              <tr>\n                {Array(this.props.ncols).fill('').map((el, idx) => idx === 2 ? <button onClick={this.clickHandler}>Play Again</button> : <Cell isDisabled/>)}\n              </tr>\n              {emptyRow}\n              {emptyRow}\n            </tbody>\n          </table>\n        </div>\n      )\n    } else {\n      return (\n        <div className={'Board'}>\n          <h1>Lights Out!</h1>\n          <table>\n            <tbody>\n              {this.state.board.map((row, rowIdx) => {\n                return (\n                  <tr key={rowIdx} className={'Row'}>\n                    {row.map((col, colIdx) => {\n                      let coord = `${rowIdx}-${colIdx}`;\n                      return (\n                          <Cell key={coord} flipCellsAroundMe={() => this.flipCellsAround(coord)} isLit={col}/>\n                      )\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <h3>Turn off all the lights to win the game.</h3>\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}